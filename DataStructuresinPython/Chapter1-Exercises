1.
'''
prints the min and maximum value
def minmax(inp):
    maximum=max(inp)
    minimum=min(inp)
    return maximum,minimum
inp=(23,45,67,89,12)
result=minmax(inp)
print(result)'''

2
.
'''
def sumsquares(n):
sum= [sum(i) for i in range(1,n)]
n=10
result=sumsquares(n)
print(result)
'''

3.
'''
def sumsquares(n):
    su = [i*i for i in range(1,n) if(i%2!=0)]
    return sum(su)
n=10
result=sumsquares(n)
print(result)'''
'''

4.
j=1
for i in range(0,9):
    print(j)
    j=j+j
result=1
sum=[result]
'''

5.
'''
import random
sum=random.randrange(2,10,2)
print(sum)'''
'''
Reverse the number
a=[1,2,3,4,5]
for i in range(0,-1):
    print(a[i])'''

	6.Write a short Python function that takes a sequence of integer values and determines if there is a distinct pair of numbers in the sequence whose product is odd
	
'''The sum of Distinct Number
from collections import Counter
a=[1,2,2,3,4,4,5]
result=Counter(a)
list=[]
for k,v in result.items():
    if(v==1):
        list.append(k)
product=1
for i in list:
    product=i*product
print(product)
if product%2!=0:
    print("The product of the distinct number is Odd ")'''
	
	
	C-1-16: In our implementation of the scalefunction (page25), the body of the loop executes thecommand data[j] = factor. 
	Wehavediscussed thatnumeric types are immutable, andthat use ofthe = operator inthis context causes the creation of a new instance
	(not the mutation of an existing instance). ?
	
	
8.	 Demonstrate how to use Python’s list comprehension syntax to produce the list [0, 2, 6, 12, 20, 30, 42, 56, 72, 90]. 
	 
	 a=[i for i in range(0,20,2)]
print(a)
sum=0
for i in a:
    sum=sum+i
    list.append(sum)
print(list)

9.Demonstrate how to use Python’s list comprehension syntax to produce the list [ a , b , c , ..., z ], but without having to type all 26 such characters literally.

import string
print(string.ascii_lowercase[0:26])



	10.How is it still possible, then, that our implementation ofscale changes the actual parameter sent by the caller? 
	
	11.Python’s random module includes a function shuﬄe(data) that accepts a list of elements and randomly reorders
	the elements so that each possible order occurs with equal probability. 
	The random module includes a more basic function randint(a, b) 
	that returns a uniformly random integer from a to b (including both endpoints). 
	Using only the randint function, implement your own version of the shuﬄe function.
	
	import random

def shuffle(i):
    list=[]
    for j in range(len(i)):
        a=random.randint(1,len(i)-1)
        while True:
            if i[a] not in list:
                list.append(i[a])
            else:
                break
            a=random.randint(0,len(i)-1)
    return list



a=[1,2,3,4,5]
result=shuffle(a)
print(result)

11. Write a Python program that repeatedly reads lines from standard input 
until an EOFError is raised, and then outputs those lines in reverse order 
(a user can indicate end of input by typing ctrl-D).

	with open('text.txt','r') as fin:
    line=fin.readlines()
    print(len(line))
    for i in range(len(line)-1,-1,-1):
        print(i)
        print(line[i])
		
12. Write a short Python program that takes two arrays a and b of length n storing intvalues,
 andreturns thedotproduct ofaandb. Thatis,itreturns an array c of length n such that c[i]=a[i]·b[i],
 fori = 0,...,n−1. 
 
    a=[1,2,3,4,5]
	b=[1,2,3,4,5]
	#c=[a[i]*b[i] for i in range(len(a))]
	c=[a[i]*b[j] for i in range(len(a)) for j in range(len(b))]
	print(c)
	
13. Give an example of a Python code fragment that attempts to write an element to a list based on an index
 that may be out of bounds. If that index is out of bounds, the program should catch the exception that results,
 and print the following error message: “Don’t try buffer overflow attacks in Python!”
 
	a=[1,2,3,4,5]
	try:
		print(a[6])
	except IndexError:
		print("Don't try buffer overflow attacks in Python!")
		
14. Write a short Python function that counts the number of vowels in a given character string

	string="Hello World"
	count=0
	vowel='aeiou'
	for i in string:
		if i in vowel:
			count+=1
	print(count)
	
15.WriteashortPython function thattakes astrings,representing asentence, and 
returns a copy of the string with all punctuation removed. For example, 
if given the string "Let s try, Mike.", this function would return "Lets try Mike".



import string
str="Let'/s try Mike!"
result=''
print(string.punctuation)
for i in string.punctuation:
    str=str.replace(i,'')
print(str)


 
 


	
	